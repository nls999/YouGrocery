package com.yougrocery.yougrocery.models;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link ProductOnGrocerylist.ProductOnGrocerylistBuilder} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractProductOnGrocerylistProductOnGrocerylistBuilderAssert<S extends AbstractProductOnGrocerylistProductOnGrocerylistBuilderAssert<S, A>, A extends ProductOnGrocerylist.ProductOnGrocerylistBuilder> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractProductOnGrocerylistProductOnGrocerylistBuilderAssert}</code> to make assertions on actual ProductOnGrocerylist.ProductOnGrocerylistBuilder.
   * @param actual the ProductOnGrocerylist.ProductOnGrocerylistBuilder we want to make assertions on.
   */
  protected AbstractProductOnGrocerylistProductOnGrocerylistBuilderAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual ProductOnGrocerylist.ProductOnGrocerylistBuilder's amount is equal to the given one.
   * @param amount the given amount to compare the actual ProductOnGrocerylist.ProductOnGrocerylistBuilder's amount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductOnGrocerylist.ProductOnGrocerylistBuilder's amount is not equal to the given one.
   */
  public S hasAmount(int amount) {
    // check that actual ProductOnGrocerylist.ProductOnGrocerylistBuilder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting amount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualAmount = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("amount", int.class, actual);
    if (actualAmount != amount) {
      failWithMessage(assertjErrorMessage, actual, amount, actualAmount);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ProductOnGrocerylist.ProductOnGrocerylistBuilder's groceryList is equal to the given one.
   * @param groceryList the given groceryList to compare the actual ProductOnGrocerylist.ProductOnGrocerylistBuilder's groceryList to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductOnGrocerylist.ProductOnGrocerylistBuilder's groceryList is not equal to the given one.
   */
  public S hasGroceryList(Grocerylist groceryList) {
    // check that actual ProductOnGrocerylist.ProductOnGrocerylistBuilder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting groceryList of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Grocerylist actualGroceryList = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("groceryList", Grocerylist.class, actual);
    if (!Objects.areEqual(actualGroceryList, groceryList)) {
      failWithMessage(assertjErrorMessage, actual, groceryList, actualGroceryList);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ProductOnGrocerylist.ProductOnGrocerylistBuilder's id is equal to the given one.
   * @param id the given id to compare the actual ProductOnGrocerylist.ProductOnGrocerylistBuilder's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductOnGrocerylist.ProductOnGrocerylistBuilder's id is not equal to the given one.
   */
  public S hasId(int id) {
    // check that actual ProductOnGrocerylist.ProductOnGrocerylistBuilder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualId = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("id", int.class, actual);
    if (actualId != id) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ProductOnGrocerylist.ProductOnGrocerylistBuilder's product is equal to the given one.
   * @param product the given product to compare the actual ProductOnGrocerylist.ProductOnGrocerylistBuilder's product to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductOnGrocerylist.ProductOnGrocerylistBuilder's product is not equal to the given one.
   */
  public S hasProduct(Product product) {
    // check that actual ProductOnGrocerylist.ProductOnGrocerylistBuilder we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting product of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Product actualProduct = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("product", Product.class, actual);
    if (!Objects.areEqual(actualProduct, product)) {
      failWithMessage(assertjErrorMessage, actual, product, actualProduct);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
